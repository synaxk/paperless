version: "1.0"
services:
  frontend:
    image: paperless:nginx
    build:
      dockerfile: ui/Dockerfile
    ports:
      - "8080:80"
  backend:
    image: paperless:openjdk
    build:
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    depends_on:
      minio:
        condition: service_started
      rabbitmq:
        condition: service_started
      persistence:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
  persistence:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=paperless
      - POSTGRES_PASSWORD=paperless
      - POSTGRES_DB=paperless
      - PGDATA=/var/lib/postgresql/data/db
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "paperless"]
      interval: 10s
      timeout: 5s
      retries: 20
  rabbitmq:
    image: rabbitmq:3.12.8-management
    container_name: paperless-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=paperless
      - RABBITMQ_DEFAULT_PASS=paperless
  minio:
    image: minio/minio
    container_name: paperless-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ACCESS_KEY=paperless
      - MINIO_SECRET_KEY=paperless
      - MINIO_CONSOLE_ADDRESS=:9001
    command: server /data
  elasticsearch:
    image: elasticsearch:8.7.1
    container_name: paperless-elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=false"
      - "xpack.security.enrollment.enabled=false"
      - ELASTIC_PASSWORD=paperless
    ports:
      - 9200:9200
      - 9300:9300
  tesseract:
    build:
      dockerfile: tesseract/Dockerfile
    container_name: paperless-tesseract
    depends_on:
      minio:
        condition: service_started
      rabbitmq:
        condition: service_started
      elasticsearch:
        condition: service_started
      persistence:
        condition: service_healthy